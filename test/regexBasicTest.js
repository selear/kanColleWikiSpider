const assert = require('assert');

// 正则表达式在工具网站下测试通过, 测试数据本注释中也有提及, 匹配模式gm
//   http://regexr.com/
//   在网站中, 正则表达式为
//      /\b([1-9]\d|\d)\/([1-9]\d|[1-9])\b|^-\/-$/gm
//   在本测试环境中, 每个测试条件都是单行测试, 由此不需要多行匹配模式m, ^, $
// 变为 /\b([1-9]\d|\d)\/([123456789]\d|[123456789])\b|-\/-/g
/*
     0/0
     0/1    -- T
     0/9    -- T
     0/10   -- T
     0/99   -- T
     0/100
     0/999
 
     0/1a
     0/9b
     0/10c
     0/99d
     0/100
     0/999
 
     10/0
     10/1   -- T
     10/9   -- T
     10/10  -- T
     10/99  -- T
     10/100
     10/999
 
     10/1a
     10/9b
     10/10c
     10/99d
     10/100e
     10/999f
 
     99/0
     99/1   -- T
     99/9   -- T
     99/10  -- T
     99/99  -- T
     99/100
     99/999
 
     99/1a
     99/9b
     99/10c
     99/99d
     99/100e
     99/999f
 
     000/0
     000/1
     000/10
     000/99
     000/100
     000/999
 
     010/0
     010/1
     010/10
     010/99
     000/100
     000/999
 
     100/0
     100/1
     100/10
     100/99
     000/100
     000/999
 
     -/-    -- T
     -/ -
     - /-
     --/-
     -/--
     --/--
 */
 // 网站中能起作用的正则表达式 - /\b([1-9]\d|\d)\/([1-9]\d|[1-9])\b|^-\/-$/gm
const regex = /\b([1-9]\d|\d)\/([1-9]\d|[1-9])\b|-\/-/g;
var result = null;
var zeroHead = [
  '0/0',
  '0/1',
  '0/9',
  '0/10',
  '0/99',
  '0/100',
  '0/999'
];
result = zeroHead.filter(function(elem) {
  return regex.test(elem);
});
console.log(result.join(', '));